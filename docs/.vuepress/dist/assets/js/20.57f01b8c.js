(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{398:function(t,a,r){"use strict";r.r(a);var e=r(17),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"第1章-作用域是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第1章-作用域是什么"}},[t._v("#")]),t._v(" 第1章 作用域是什么")]),t._v(" "),r("h2",{attrs:{id:"掌握"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#掌握"}},[t._v("#")]),t._v(" 掌握")]),t._v(" "),r("h2",{attrs:{id:"什么是作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域"}},[t._v("#")]),t._v(" 什么是作用域")]),t._v(" "),r("p",[t._v("有一套规则（设计良好），这套规则用来找到变量，我们把这套规则称之为 "),r("code",[t._v("作用域")])]),t._v(" "),r("blockquote",[r("ul",[r("li",[r("p",[t._v("对于常见编译型语言（例如：Java）来说，编译步骤分为：词法分析->语法分析->语义检查->代码优化和字节码生成。")])]),t._v(" "),r("li",[r("p",[t._v("对于解释型语言（例如 JavaScript）来说，通过词法分析 -> 语法分析 -> 语法树，就可以开始解释执行了。")])]),t._v(" "),r("li",[r("p",[t._v("词法分析是将字符流(char stream)转换为记号流(token stream)")])]),t._v(" "),r("li",[r("p",[t._v("语法分析成 AST (Abstract Syntax Tree)")])]),t._v(" "),r("li",[r("p",[t._v("预编译，当JavaScript引擎解析脚本时，它会在预编译期对所有声明的变量和函数进行处理！并且是先预声明变量，再预定义函数！")])]),t._v(" "),r("li",[r("p",[t._v("解释执行，在执行过程中，JavaScript 引擎是严格按着作用域机制（scope）来执行的，并且 JavaScript 的变量和函数作用域是在定义时决定的，而不是执行时决定的。JavaScript 中的变量作用域在函数体内有效，无块作用域；")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);